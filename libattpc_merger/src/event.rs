use fxhash::FxHashMap;
use ndarray::{s, Array1, Array2};

use crate::constants::SAMPLE_COLUMN_OFFSET;
use crate::hardware_id::Detector;

use super::channel_map::GetChannelMap;
use super::constants::{COBO_WITH_TIMESTAMP, FPN_CHANNELS, NUMBER_OF_MATRIX_COLUMNS};
use super::error::EventError;
use super::graw_frame::GrawFrame;
use super::hardware_id::HardwareID;

#[derive(Debug)]
pub struct EventData {
    pub pad_matrix: Array2<i16>,
    pub upstream_front_matrix: Array2<i16>,
    pub upstream_back_matrix: Array2<i16>,
    pub downstream_front_matrix: Array2<i16>,
    pub downstream_back_matrix: Array2<i16>,
}

/// # Event
/// An event is a collection of traces which all occured with the same Event ID generated by the AT-TPC DAQ.
/// An event is created from a Vec of GrawFrames, which are then parsed into ndarray traces. The event can also subtract
/// the fixed pattern noise recored by the electronics. To write the event to HDF5, convert the event to a data matrix.
#[derive(Debug)]
pub struct Event {
    nframes: i32,
    pad_traces: FxHashMap<usize, Array1<i16>>, //maps pad id to the trace for that pad
    si_upfront_traces: FxHashMap<usize, Array1<i16>>, //maps pad id to the trace for that pad
    si_upback_traces: FxHashMap<usize, Array1<i16>>, //maps pad id to the trace for that pad
    si_downfront_traces: FxHashMap<usize, Array1<i16>>, //maps pad id to the trace for that pad
    si_downback_traces: FxHashMap<usize, Array1<i16>>, //maps pad id to the trace for that pad
    pub timestamp: u64,
    pub timestampother: u64,
    pub event_id: u32,
}

impl Event {
    /// Make a new event from a list of GrawFrames
    pub fn new(channel_map: &GetChannelMap, frames: &Vec<GrawFrame>) -> Result<Self, EventError> {
        let mut event = Event {
            nframes: 0,
            pad_traces: FxHashMap::default(),
            si_upfront_traces: FxHashMap::default(),
            si_upback_traces: FxHashMap::default(),
            si_downfront_traces: FxHashMap::default(),
            si_downback_traces: FxHashMap::default(),
            timestamp: 0,
            timestampother: 0,
            event_id: 0,
        };
        for frame in frames {
            event.append_frame(channel_map, frame)?;
        }

        Ok(event)
    }

    /// Convert the event traces to a data matrix for writing to disk. Follows format used by AT-TPC analysis
    pub fn convert_to_data_matrices(self) -> EventData {
        let mut matrices = EventData {
            pad_matrix: Array2::<i16>::zeros([self.pad_traces.len(), NUMBER_OF_MATRIX_COLUMNS]),
            upstream_front_matrix: Array2::<i16>::zeros([
                self.si_upfront_traces.len(),
                NUMBER_OF_MATRIX_COLUMNS,
            ]),
            upstream_back_matrix: Array2::<i16>::zeros([
                self.si_upback_traces.len(),
                NUMBER_OF_MATRIX_COLUMNS,
            ]),
            downstream_front_matrix: Array2::<i16>::zeros([
                self.si_downfront_traces.len(),
                NUMBER_OF_MATRIX_COLUMNS,
            ]),
            downstream_back_matrix: Array2::<i16>::zeros([
                self.si_downback_traces.len(),
                NUMBER_OF_MATRIX_COLUMNS,
            ]),
        };
        for (row, (_hw_id, trace)) in self.pad_traces.into_iter().enumerate() {
            let mut trace_slice = matrices.pad_matrix.slice_mut(s![row, ..]);
            trace.move_into(&mut trace_slice);
        }
        for (row, (_hw_id, trace)) in self.si_upfront_traces.into_iter().enumerate() {
            let mut trace_slice = matrices.upstream_front_matrix.slice_mut(s![row, ..]);
            trace.move_into(&mut trace_slice);
        }
        for (row, (_hw_id, trace)) in self.si_upback_traces.into_iter().enumerate() {
            let mut trace_slice = matrices.upstream_back_matrix.slice_mut(s![row, ..]);
            trace.assign_to(&mut trace_slice);
        }
        for (row, (_hw_id, trace)) in self.si_downfront_traces.into_iter().enumerate() {
            let mut trace_slice = matrices.downstream_front_matrix.slice_mut(s![row, ..]);
            trace.assign_to(&mut trace_slice);
        }
        for (row, (_hw_id, trace)) in self.si_downback_traces.into_iter().enumerate() {
            let mut trace_slice = matrices.downstream_back_matrix.slice_mut(s![row, ..]);
            trace.move_into(&mut trace_slice);
        }

        matrices
    }

    /// Add a frame to the event.
    ///
    /// If the frame does not belong to this event, an error is returned
    fn append_frame(
        &mut self,
        channel_map: &GetChannelMap,
        frame: &GrawFrame,
    ) -> Result<(), EventError> {
        // Check if this is the first frame or that the event id's match
        if self.nframes == 0 {
            self.event_id = frame.header.event_id;
        } else if self.event_id != frame.header.event_id {
            return Err(EventError::MismatchedEventID(
                frame.header.event_id,
                self.event_id,
            ));
        }

        if frame.header.cobo_id == COBO_WITH_TIMESTAMP {
            // this cobo has a TS in sync with other DAQ
            self.timestampother = frame.header.event_time;
        } else {
            // all other cobos have the same TS from Mutant
            self.timestamp = frame.header.event_time;
        }

        let mut hw_id: &HardwareID;
        for datum in frame.data.iter() {
            // Reject FPN channels
            if FPN_CHANNELS.contains(&datum.channel) {
                continue;
            }

            // Get the hardware ID
            hw_id = match channel_map.get_hardware_id(
                &frame.header.cobo_id,
                &frame.header.asad_id,
                &datum.aget_id,
                &datum.channel,
            ) {
                Some(hw) => hw,
                None => {
                    spdlog::warn!(
                        "Unregistered GET channel -- CoBo: {} AsAd: {} AGET: {} Channel: {}",
                        frame.header.cobo_id,
                        frame.header.asad_id,
                        datum.aget_id,
                        datum.channel
                    );
                    continue;
                }
            };

            // Select the appropriate trace map, extract channel
            let (traces, channel) = match &hw_id.detector {
                Detector::Pad(p) => (&mut self.pad_traces, p),
                Detector::SiUpstreamFront(c) => (&mut self.si_upfront_traces, c),
                Detector::SiUpstreamBack(c) => (&mut self.si_upback_traces, c),
                Detector::SiDownstreamFront(c) => (&mut self.si_downfront_traces, c),
                Detector::SiDownstreamBack(c) => (&mut self.si_downback_traces, c),
            };

            // Place the data into the right trace
            match traces.get_mut(channel) {
                Some(trace) => {
                    trace[datum.time_bucket_id as usize + SAMPLE_COLUMN_OFFSET] = datum.sample
                }
                None => {
                    let mut trace: Array1<i16> = Array1::<i16>::zeros(NUMBER_OF_MATRIX_COLUMNS);
                    trace[0] = hw_id.cobo_id as i16;
                    trace[1] = hw_id.asad_id as i16;
                    trace[2] = hw_id.aget_id as i16;
                    trace[3] = hw_id.channel as i16;
                    trace[5] = *channel as i16;
                    trace[datum.time_bucket_id as usize + SAMPLE_COLUMN_OFFSET] = datum.sample;
                }
            };
        }

        self.nframes += 1;

        Ok(())
    }
}
